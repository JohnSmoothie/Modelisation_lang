package langModel;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestName;

import java.util.ArrayList;
import java.util.List;


/**
 * This JUnit Test Class has been generated by right clicking on the NgramUtils class
 * and selecting "New > Junit Test Case". After that, you have to select the methods
 * for which you would like to generate tests.
 * In practice, you will duplicate manually the test methods to possibly create
 * several tests for one method.
 * <p>
 * Your work is then to remove the fail parts and to implement each test.
 * One method is given as an example
 * <p>
 * To run them:
 * either right click on the class name or simply on the method name and
 * select "Run As Junit Test".
 *
 * @author N. Hernandez and S. Quiniou (2015)
 */
public class NgramUtilsTest {
    String sentence = "<s> cette phrase est de taille 9 . </s>";
    String ngram = "o√π commence l' historique de cet n-gramme";


    /**
     * Test method for {@link langModel.NgramUtils#getSequenceSize(java.lang.String)}.
     */
    @Test
    public void testGetSequenceSize() {

        assertEquals(9, NgramUtils.getSequenceSize(sentence));
    }

    /**
     * Test method for {@link langModel.NgramUtils#getSequenceSize(java.lang.String)}.
     */
    @Test
    public void testGetSequenceSize2() {
        assertEquals(0, NgramUtils.getSequenceSize(""));
    }


    /**
     * Test method for {@link langModel.NgramUtils#generateNgrams(java.lang.String, int, int)}.
     */
    @Test
    public void testGenerateNgrams() {
        List<String> list = new ArrayList<String>();
        list.add("a");
        list.add("b");
        list.add("c");
        list.add("d");
        list.add("e");
        list.add("f");
        list.add("g");
        list.add("a b");
        list.add("b c");
        list.add("c d");
        list.add("d e");
        list.add("e f");
        list.add("f g");
        list.add("a b c");
        list.add("b c d");
        list.add("c d e");
        list.add("d e f");
        list.add("e f g");
        assertEquals(list, NgramUtils.generateNgrams("a b c d e f g",1, 3));
    }

    /**
     * Test method for {@link langModel.NgramUtils#generateNgrams(java.lang.String, int, int)}.
     */
    @Test
    public void testGetHistory() {
        assertEquals("cette", NgramUtils.getHistory("l' historique de cette phrase", 2));
    }

    /**
     * Test method for {@link langModel.NgramUtils#generateNgrams(java.lang.String, int, int)}.
     */
    @Test
    public void testGetHistory2() {
        assertEquals("de cette", NgramUtils.getHistory("l' historique de cette phrase", 3));
    }


    /**
     * Test method for {@link langModel.NgramUtils#decomposeIntoNgrams(java.lang.String, int)}.
     */
    @Test
    public void testDecomposeIntoNgrams() {
        assertEquals(null, NgramUtils.decomposeIntoNgrams("", 1));
    }

    /**
     * Test method for {@link langModel.NgramUtils#decomposeIntoNgrams(java.lang.String, int)}.
     */
    @Test
    public void testDecomposeIntoNgrams2() {
        List<String> list = new ArrayList<String>();
        list.add("a");
        list.add("a b");
        list.add("a b c");
        list.add("b c d");
        list.add("c d e");
        list.add("d e f");
        list.add("e f g");
        assertEquals(list, NgramUtils.decomposeIntoNgrams("a b c d e f g", 3));
    }

    @Test
    public void testGetStringOOV() {
        Vocabulary voc = new Vocabulary();
        voc.addWord("bonjour");
        voc.addWord("salut");
        String s = "bonjour au revoir salut au revoir";

        assertEquals("<unk> au revoir <unk> au revoir", NgramUtils.getStringOOV(s, voc));
    }

    @Test
    public void testGetStringOOV2() {
        Vocabulary voc = new Vocabulary();
        voc.addWord("bonjour");
        String s = "bonjour au revoir salut au revoir";

        assertEquals("<unk> au revoir salut au revoir", NgramUtils.getStringOOV(s, voc));
    }

    @Test
    public void testGetStringOOV3() {
        Vocabulary voc = new Vocabulary();
        voc.addWord("bonjour");
        voc.addWord("au");
        voc.addWord("revoir");
        voc.addWord("salut");
        String s = "bonjour au revoir salut au revoir";

        assertEquals("<unk> <unk> <unk> <unk> <unk> <unk>", NgramUtils.getStringOOV(s, voc));
    }

    /**
     * The following code displays a separator
     * between each method output
     * <p>
     * (manually added)
     **/
    @Rule
    public TestName name = new TestName();

    @Before
    public void printSeparator() {
        System.out.println("\n=== " + name.getMethodName() + " =====================");
    }

}
